/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/minio/minio-operator/pkg/apis/miniooperator.min.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MirrorInstanceLister helps list MirrorInstances.
// All objects returned here must be treated as read-only.
type MirrorInstanceLister interface {
	// List lists all MirrorInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MirrorInstance, err error)
	// MirrorInstances returns an object that can list and get MirrorInstances.
	MirrorInstances(namespace string) MirrorInstanceNamespaceLister
	MirrorInstanceListerExpansion
}

// mirrorInstanceLister implements the MirrorInstanceLister interface.
type mirrorInstanceLister struct {
	indexer cache.Indexer
}

// NewMirrorInstanceLister returns a new MirrorInstanceLister.
func NewMirrorInstanceLister(indexer cache.Indexer) MirrorInstanceLister {
	return &mirrorInstanceLister{indexer: indexer}
}

// List lists all MirrorInstances in the indexer.
func (s *mirrorInstanceLister) List(selector labels.Selector) (ret []*v1beta1.MirrorInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MirrorInstance))
	})
	return ret, err
}

// MirrorInstances returns an object that can list and get MirrorInstances.
func (s *mirrorInstanceLister) MirrorInstances(namespace string) MirrorInstanceNamespaceLister {
	return mirrorInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MirrorInstanceNamespaceLister helps list and get MirrorInstances.
// All objects returned here must be treated as read-only.
type MirrorInstanceNamespaceLister interface {
	// List lists all MirrorInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MirrorInstance, err error)
	// Get retrieves the MirrorInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.MirrorInstance, error)
	MirrorInstanceNamespaceListerExpansion
}

// mirrorInstanceNamespaceLister implements the MirrorInstanceNamespaceLister
// interface.
type mirrorInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MirrorInstances in the indexer for a given namespace.
func (s mirrorInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MirrorInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MirrorInstance))
	})
	return ret, err
}

// Get retrieves the MirrorInstance from the indexer for a given namespace and name.
func (s mirrorInstanceNamespaceLister) Get(name string) (*v1beta1.MirrorInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("mirrorinstance"), name)
	}
	return obj.(*v1beta1.MirrorInstance), nil
}
